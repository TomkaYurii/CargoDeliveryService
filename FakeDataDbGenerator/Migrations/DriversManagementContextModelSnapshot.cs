// <auto-generated />
using System;
using FakeDataDriverDbGenerator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FakeDataDriverDbGenerator.Migrations
{
    [DbContext(typeof(DriversManagementContext))]
    partial class DriversManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            Address = "1602 Fidel Village, Port Marisol, Niue",
                            CompanyName = "Brown and Sons",
                            ContactEmail = "Maria.Pagac@yahoo.com",
                            ContactPerson = "Maximillian Ankunding",
                            ContactPhone = "980-855-2963",
                            CreatedAt = new DateTime(2022, 11, 21, 22, 4, 3, 674, DateTimeKind.Local).AddTicks(2264),
                            Email = "Elody_Senger71@hotmail.com",
                            Phone = "477-690-1371"
                        },
                        new
                        {
                            CompanyId = 2,
                            Address = "07005 Kilback Flat, East Mayra, Djibouti",
                            CompanyName = "Jakubowski, Cummerata and Wyman",
                            ContactEmail = "Jeffery_Heaney@gmail.com",
                            ContactPerson = "Evan Stanton",
                            ContactPhone = "760-702-2495",
                            CreatedAt = new DateTime(2022, 8, 16, 14, 16, 10, 143, DateTimeKind.Local).AddTicks(9548),
                            Email = "Mathew.Walsh3@gmail.com",
                            Phone = "703-237-8869"
                        },
                        new
                        {
                            CompanyId = 3,
                            Address = "3358 Demarco Village, Alexanderton, Trinidad and Tobago",
                            CompanyName = "Predovic Group",
                            ContactEmail = "Jeffery_Kertzmann@yahoo.com",
                            ContactPerson = "Dedrick Labadie",
                            ContactPhone = "285-748-6858",
                            CreatedAt = new DateTime(2022, 10, 21, 9, 0, 37, 672, DateTimeKind.Local).AddTicks(2637),
                            Email = "Karson.Hirthe@yahoo.com",
                            Phone = "274-825-4094"
                        },
                        new
                        {
                            CompanyId = 4,
                            Address = "72535 Kirlin Mall, Legrosmouth, Kuwait",
                            CompanyName = "Zboncak, Maggio and Jenkins",
                            ContactEmail = "Maxime_Leannon@gmail.com",
                            ContactPerson = "Ashtyn Batz",
                            ContactPhone = "910-425-8470",
                            CreatedAt = new DateTime(2022, 5, 15, 15, 25, 17, 614, DateTimeKind.Local).AddTicks(4344),
                            Email = "Elizabeth_Ondricka@yahoo.com",
                            Phone = "838-864-0031"
                        },
                        new
                        {
                            CompanyId = 5,
                            Address = "5193 Corkery Village, North Jaylanland, Venezuela",
                            CompanyName = "Graham - Gislason",
                            ContactEmail = "Clotilde_Batz@yahoo.com",
                            ContactPerson = "Eloise Bruen",
                            ContactPhone = "517-917-3198",
                            CreatedAt = new DateTime(2022, 5, 12, 22, 51, 10, 530, DateTimeKind.Local).AddTicks(5650),
                            Email = "Timothy77@hotmail.com",
                            Phone = "224-808-7172"
                        },
                        new
                        {
                            CompanyId = 6,
                            Address = "471 Klein Roads, McLaughlinville, San Marino",
                            CompanyName = "Mayert, Windler and Smitham",
                            ContactEmail = "Ariel_Hoeger@gmail.com",
                            ContactPerson = "Melyna Conn",
                            ContactPhone = "704-233-1359",
                            CreatedAt = new DateTime(2023, 3, 25, 17, 2, 57, 244, DateTimeKind.Local).AddTicks(6392),
                            Email = "Gunner.Doyle3@gmail.com",
                            Phone = "586-763-0123"
                        },
                        new
                        {
                            CompanyId = 7,
                            Address = "8849 Baumbach Villages, North Shanny, India",
                            CompanyName = "Swaniawski - Olson",
                            ContactEmail = "Vesta_Raynor@yahoo.com",
                            ContactPerson = "Berta Cruickshank",
                            ContactPhone = "281-259-8610",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 14, 43, 958, DateTimeKind.Local).AddTicks(7105),
                            Email = "Albin_Kshlerin29@hotmail.com",
                            Phone = "880-475-1430"
                        },
                        new
                        {
                            CompanyId = 8,
                            Address = "2171 Jacklyn Vista, Kristintown, Cyprus",
                            CompanyName = "Cruickshank, Hessel and Gleason",
                            ContactEmail = "Rolando_Beer@gmail.com",
                            ContactPerson = "Jordan Dickens",
                            ContactPhone = "568-274-6961",
                            CreatedAt = new DateTime(2022, 12, 19, 5, 26, 30, 672, DateTimeKind.Local).AddTicks(7837),
                            Email = "Nigel56@yahoo.com",
                            Phone = "948-983-8468"
                        },
                        new
                        {
                            CompanyId = 9,
                            Address = "05948 Trevion Ville, East Macfurt, Micronesia",
                            CompanyName = "Koch - Beer",
                            ContactEmail = "Laverne.Balistreri@yahoo.com",
                            ContactPerson = "Ozella Cremin",
                            ContactPhone = "580-642-2267",
                            CreatedAt = new DateTime(2022, 6, 21, 1, 19, 3, 487, DateTimeKind.Local).AddTicks(8798),
                            Email = "Ernestine_Langosh21@gmail.com",
                            Phone = "900-851-5362"
                        },
                        new
                        {
                            CompanyId = 10,
                            Address = "96256 Jadon Field, Gorczanyton, Comoros",
                            CompanyName = "Rolfson, Rosenbaum and Pouros",
                            ContactEmail = "Myrtis54@yahoo.com",
                            ContactPerson = "Dawn Collier",
                            ContactPhone = "310-461-4841",
                            CreatedAt = new DateTime(2022, 9, 3, 5, 2, 2, 574, DateTimeKind.Local).AddTicks(5528),
                            Email = "Briana31@gmail.com",
                            Phone = "913-365-6958"
                        },
                        new
                        {
                            CompanyId = 11,
                            Address = "33301 Roberta Vista, New Stellaport, Slovenia",
                            CompanyName = "Bayer - Koch",
                            ContactEmail = "Arlene67@yahoo.com",
                            ContactPerson = "Diego Kub",
                            ContactPhone = "382-329-7457",
                            CreatedAt = new DateTime(2022, 7, 22, 19, 18, 10, 67, DateTimeKind.Local).AddTicks(9034),
                            Email = "Trisha_Friesen@yahoo.com",
                            Phone = "925-688-7635"
                        },
                        new
                        {
                            CompanyId = 12,
                            Address = "61887 Jakob Lodge, South Sven, Jamaica",
                            CompanyName = "Hayes, Crist and Carter",
                            ContactEmail = "Heber80@yahoo.com",
                            ContactPerson = "Edythe Sipes",
                            ContactPhone = "453-977-0962",
                            CreatedAt = new DateTime(2022, 6, 10, 9, 34, 17, 561, DateTimeKind.Local).AddTicks(2587),
                            Email = "Nathanial.Morissette@hotmail.com",
                            Phone = "247-902-8221"
                        },
                        new
                        {
                            CompanyId = 13,
                            Address = "50865 Renner Vista, North Callieborough, Austria",
                            CompanyName = "Murray - Steuber",
                            ContactEmail = "Magnus_Johnson57@hotmail.com",
                            ContactPerson = "Chloe Hansen",
                            ContactPhone = "853-343-5772",
                            CreatedAt = new DateTime(2023, 3, 6, 5, 43, 40, 277, DateTimeKind.Local).AddTicks(7371),
                            Email = "Kathryn_Yost31@gmail.com",
                            Phone = "250-415-9817"
                        },
                        new
                        {
                            CompanyId = 14,
                            Address = "7463 Daugherty Lodge, Lake Oswald, Samoa",
                            CompanyName = "Walsh LLC",
                            ContactEmail = "Edwin67@hotmail.com",
                            ContactPerson = "Brown Walter",
                            ContactPhone = "436-697-9261",
                            CreatedAt = new DateTime(2022, 9, 24, 3, 14, 40, 713, DateTimeKind.Local).AddTicks(3364),
                            Email = "Francesco.Jerde@hotmail.com",
                            Phone = "707-762-3905"
                        },
                        new
                        {
                            CompanyId = 15,
                            Address = "883 Murazik Vista, Port Dorcasport, Iceland",
                            CompanyName = "Erdman - Funk",
                            ContactEmail = "Raven_Abshire@hotmail.com",
                            ContactPerson = "Guiseppe Harber",
                            ContactPhone = "444-969-4087",
                            CreatedAt = new DateTime(2022, 8, 19, 11, 26, 51, 898, DateTimeKind.Local).AddTicks(8874),
                            Email = "Willie72@hotmail.com",
                            Phone = "301-485-5211"
                        },
                        new
                        {
                            CompanyId = 16,
                            Address = "9109 Blanda Loop, Pedroville, Angola",
                            CompanyName = "Langworth Group",
                            ContactEmail = "Shayne_Sauer33@yahoo.com",
                            ContactPerson = "Mortimer Hudson",
                            ContactPhone = "322-500-7120",
                            CreatedAt = new DateTime(2022, 12, 22, 18, 38, 47, 534, DateTimeKind.Local).AddTicks(6634),
                            Email = "Lea.Wisoky66@hotmail.com",
                            Phone = "615-997-6628"
                        },
                        new
                        {
                            CompanyId = 17,
                            Address = "058 Juana Walk, Emmanuelburgh, Thailand",
                            CompanyName = "Schneider - O'Conner",
                            ContactEmail = "Clint.Strosin72@hotmail.com",
                            ContactPerson = "Jalen Waters",
                            ContactPhone = "354-519-2654",
                            CreatedAt = new DateTime(2022, 6, 9, 3, 51, 14, 269, DateTimeKind.Local).AddTicks(9858),
                            Email = "Katheryn77@yahoo.com",
                            Phone = "751-280-0893"
                        },
                        new
                        {
                            CompanyId = 18,
                            Address = "29550 Wallace Mall, McCulloughburgh, Israel",
                            CompanyName = "Boyle and Sons",
                            ContactEmail = "Jaime_Ritchie50@yahoo.com",
                            ContactPerson = "Idell Walter",
                            ContactPhone = "664-913-7433",
                            CreatedAt = new DateTime(2022, 5, 31, 12, 5, 37, 787, DateTimeKind.Local).AddTicks(1854),
                            Email = "Joshua.Mayert53@hotmail.com",
                            Phone = "322-320-3414"
                        },
                        new
                        {
                            CompanyId = 19,
                            Address = "322 Heather Walks, New Filiberto, Falkland Islands (Malvinas)",
                            CompanyName = "Huel - Beatty",
                            ContactEmail = "Thurman_Legros0@yahoo.com",
                            ContactPerson = "Jada Wehner",
                            ContactPhone = "557-435-7099",
                            CreatedAt = new DateTime(2022, 7, 6, 13, 36, 4, 527, DateTimeKind.Local).AddTicks(5679),
                            Email = "Dominic.Koelpin20@hotmail.com",
                            Phone = "971-863-5265"
                        },
                        new
                        {
                            CompanyId = 20,
                            Address = "46003 Sandra Manor, Wunschport, Estonia",
                            CompanyName = "Pfannerstill LLC",
                            ContactEmail = "Gwendolyn.Connelly86@yahoo.com",
                            ContactPerson = "Eunice Kuhn",
                            ContactPhone = "750-773-8255",
                            CreatedAt = new DateTime(2022, 7, 6, 3, 43, 17, 508, DateTimeKind.Local).AddTicks(663),
                            Email = "Antonetta_Dickens@gmail.com",
                            Phone = "504-373-0631"
                        });
                });

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DriverLicenseCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DriverLicenseExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("DriverLicenseIssuingAuthority")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DriverLicenseIssuingDate")
                        .HasColumnType("date");

                    b.Property<string>("DriverLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EmploymentEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EmploymentStartDate")
                        .HasColumnType("date");

                    b.Property<string>("EmploymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("IdentificationExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentificationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int")
                        .HasColumnName("PhotoID");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("DriverId");

                    b.HasIndex(new[] { "PhotoId" }, "UQ__Drivers__21B7B583AB601A5C")
                        .IsUnique()
                        .HasFilter("[PhotoID] IS NOT NULL");

                    b.HasIndex(new[] { "CompanyId" }, "UQ__Drivers__2D971C4D3AD2DF5B")
                        .IsUnique()
                        .HasFilter("[CompanyID] IS NOT NULL");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Expense", b =>
                {
                    b.Property<int>("ExpensesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExpensesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpensesId"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    b.Property<decimal>("DriverPayment")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("FuelCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MaintenanceCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("TruckId")
                        .HasColumnType("int")
                        .HasColumnName("TruckID");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ExpensesId")
                        .HasName("PK__Expenses__DFC8A07C5CE04B84");

                    b.HasIndex("DriverId");

                    b.HasIndex("TruckId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Inspection", b =>
                {
                    b.Property<int>("InspectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InspectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InspectionId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("date");

                    b.Property<bool>("Result")
                        .HasColumnType("bit");

                    b.Property<int?>("TruckId")
                        .HasColumnType("int")
                        .HasColumnName("TruckID");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("InspectionId");

                    b.HasIndex("TruckId");

                    b.ToTable("Inspections");

                    b.HasData(
                        new
                        {
                            InspectionId = 1,
                            CreatedAt = new DateTime(2022, 10, 23, 23, 24, 46, 474, DateTimeKind.Local).AddTicks(5947),
                            Description = "totam",
                            InspectionDate = new DateTime(2022, 12, 30, 4, 15, 6, 119, DateTimeKind.Local).AddTicks(2247),
                            Result = false,
                            TruckId = 14
                        },
                        new
                        {
                            InspectionId = 2,
                            CreatedAt = new DateTime(2023, 3, 26, 20, 25, 5, 581, DateTimeKind.Local).AddTicks(475),
                            Description = "Maiores aut nemo et.",
                            InspectionDate = new DateTime(2022, 6, 22, 11, 48, 21, 410, DateTimeKind.Local).AddTicks(9929),
                            Result = true,
                            TruckId = 5
                        },
                        new
                        {
                            InspectionId = 3,
                            CreatedAt = new DateTime(2022, 10, 21, 9, 0, 37, 675, DateTimeKind.Local).AddTicks(1377),
                            Description = "Natus dolor magnam rerum.\nVel quas consequatur optio doloremque.\nEt quia at.\nVoluptatum numquam qui et vitae asperiores blanditiis excepturi unde.\nDolores exercitationem et quas veritatis est.\nSint nihil vero distinctio consequatur unde quo laborum corrupti iusto.",
                            InspectionDate = new DateTime(2022, 12, 13, 19, 21, 36, 702, DateTimeKind.Local).AddTicks(7340),
                            Result = true,
                            TruckId = 11
                        },
                        new
                        {
                            InspectionId = 4,
                            CreatedAt = new DateTime(2022, 6, 1, 23, 43, 19, 268, DateTimeKind.Local).AddTicks(7794),
                            Description = "Aut illo optio ducimus rem placeat. Officia eum omnis dolor. Perspiciatis voluptatum repellendus eos ut eum libero. Sunt aspernatur quis dolorem et corporis. Molestias et sunt eaque itaque nisi odit doloremque.",
                            InspectionDate = new DateTime(2022, 6, 6, 2, 54, 51, 994, DateTimeKind.Local).AddTicks(4861),
                            Result = true,
                            TruckId = 12
                        },
                        new
                        {
                            InspectionId = 5,
                            CreatedAt = new DateTime(2022, 4, 8, 20, 41, 32, 346, DateTimeKind.Local).AddTicks(9704),
                            Description = "Fuga laudantium non ratione hic.",
                            InspectionDate = new DateTime(2022, 11, 27, 10, 28, 7, 286, DateTimeKind.Local).AddTicks(2320),
                            Result = false,
                            TruckId = 3
                        },
                        new
                        {
                            InspectionId = 6,
                            CreatedAt = new DateTime(2022, 9, 3, 4, 42, 7, 944, DateTimeKind.Local).AddTicks(8094),
                            Description = "Repudiandae et deserunt qui quisquam corrupti quo voluptatem possimus.\nSit omnis eum porro voluptas quidem laborum.\nConsequatur magni quis eum explicabo.\nSed repudiandae ea aperiam impedit eos.\nVoluptatem alias rem quis commodi aut eum omnis.\nQuasi beatae vel omnis minus perferendis odit nihil voluptatibus impedit.",
                            InspectionDate = new DateTime(2022, 5, 20, 18, 1, 22, 577, DateTimeKind.Local).AddTicks(9695),
                            Result = true,
                            TruckId = 11
                        },
                        new
                        {
                            InspectionId = 7,
                            CreatedAt = new DateTime(2022, 8, 1, 18, 30, 41, 640, DateTimeKind.Local).AddTicks(8444),
                            Description = "Consequatur cum ipsa. Nulla at ducimus recusandae dignissimos aut aut ea aut suscipit. Accusantium placeat error quia deleniti iure doloremque tenetur accusantium. Porro est exercitationem aut neque dicta. Eum voluptatem ut.",
                            InspectionDate = new DateTime(2022, 11, 11, 1, 34, 37, 869, DateTimeKind.Local).AddTicks(7187),
                            Result = false,
                            TruckId = 18
                        },
                        new
                        {
                            InspectionId = 8,
                            CreatedAt = new DateTime(2022, 9, 11, 3, 59, 57, 853, DateTimeKind.Local).AddTicks(9090),
                            Description = "ea",
                            InspectionDate = new DateTime(2022, 5, 4, 9, 7, 53, 161, DateTimeKind.Local).AddTicks(4702),
                            Result = true,
                            TruckId = 17
                        },
                        new
                        {
                            InspectionId = 9,
                            CreatedAt = new DateTime(2023, 2, 25, 17, 25, 40, 795, DateTimeKind.Local).AddTicks(9463),
                            Description = "Deleniti enim nihil.",
                            InspectionDate = new DateTime(2022, 10, 25, 16, 41, 8, 453, DateTimeKind.Local).AddTicks(2052),
                            Result = false,
                            TruckId = 20
                        },
                        new
                        {
                            InspectionId = 10,
                            CreatedAt = new DateTime(2023, 1, 17, 23, 1, 41, 915, DateTimeKind.Local).AddTicks(642),
                            Description = "Quisquam ullam iure praesentium numquam sapiente distinctio ad. Tempore voluptatibus ad et adipisci hic amet. Corporis soluta cupiditate soluta. Provident rerum nemo dolores debitis dicta voluptatem labore dolores adipisci. Adipisci illo quidem sit dolores. Ea dolor animi quod laborum quia perspiciatis sunt tempora.",
                            InspectionDate = new DateTime(2022, 4, 18, 0, 14, 23, 744, DateTimeKind.Local).AddTicks(9416),
                            Result = false,
                            TruckId = 11
                        },
                        new
                        {
                            InspectionId = 11,
                            CreatedAt = new DateTime(2023, 1, 27, 5, 57, 54, 159, DateTimeKind.Local).AddTicks(3113),
                            Description = "blanditiis",
                            InspectionDate = new DateTime(2022, 10, 9, 7, 47, 39, 36, DateTimeKind.Local).AddTicks(6922),
                            Result = false,
                            TruckId = 4
                        },
                        new
                        {
                            InspectionId = 12,
                            CreatedAt = new DateTime(2022, 7, 18, 21, 49, 19, 428, DateTimeKind.Local).AddTicks(7070),
                            Description = "Sed fuga quae veniam.",
                            InspectionDate = new DateTime(2022, 4, 1, 15, 20, 54, 328, DateTimeKind.Local).AddTicks(4271),
                            Result = true,
                            TruckId = 10
                        },
                        new
                        {
                            InspectionId = 13,
                            CreatedAt = new DateTime(2022, 9, 4, 2, 29, 54, 765, DateTimeKind.Local).AddTicks(5337),
                            Description = "Architecto sint qui delectus qui.\nAccusamus et similique.\nVitae voluptatem voluptas illo.\nUt perspiciatis eaque.\nSunt aut necessitatibus aut.\nEos omnis maiores debitis cupiditate ipsam sit voluptas.",
                            InspectionDate = new DateTime(2022, 9, 22, 22, 54, 9, 620, DateTimeKind.Local).AddTicks(1630),
                            Result = false,
                            TruckId = 5
                        },
                        new
                        {
                            InspectionId = 14,
                            CreatedAt = new DateTime(2022, 4, 28, 9, 58, 26, 339, DateTimeKind.Local).AddTicks(810),
                            Description = "Non autem dolor laudantium impedit iusto id. Aliquam facere dolor est placeat cum. Id cum veniam. Et quasi provident ut commodi. Ex ex qui molestiae laboriosam provident.",
                            InspectionDate = new DateTime(2023, 3, 16, 6, 27, 24, 911, DateTimeKind.Local).AddTicks(9066),
                            Result = true,
                            TruckId = 13
                        },
                        new
                        {
                            InspectionId = 15,
                            CreatedAt = new DateTime(2022, 7, 30, 8, 35, 9, 233, DateTimeKind.Local).AddTicks(1752),
                            Description = "magnam",
                            InspectionDate = new DateTime(2022, 9, 6, 14, 0, 40, 203, DateTimeKind.Local).AddTicks(6491),
                            Result = false,
                            TruckId = 20
                        },
                        new
                        {
                            InspectionId = 16,
                            CreatedAt = new DateTime(2022, 12, 22, 18, 38, 47, 537, DateTimeKind.Local).AddTicks(2593),
                            Description = "Et ut architecto totam a quia beatae a harum autem.\nVoluptatem officia repudiandae aut.\nEarum est optio dolorum ut illum est.\nDelectus delectus explicabo libero minus reprehenderit incidunt.\nVeniam veniam vitae ipsa temporibus neque.\nVitae nisi rerum dolor impedit.",
                            InspectionDate = new DateTime(2023, 2, 27, 21, 33, 55, 495, DateTimeKind.Local).AddTicks(3839),
                            Result = false,
                            TruckId = 7
                        },
                        new
                        {
                            InspectionId = 17,
                            CreatedAt = new DateTime(2023, 2, 17, 22, 33, 20, 939, DateTimeKind.Local).AddTicks(5574),
                            Description = "Aut esse cupiditate ut. Perspiciatis illum quod. Ipsam aut est aut sed. Eveniet architecto sit et. Consequatur praesentium unde modi et est laudantium non dolores esse.",
                            InspectionDate = new DateTime(2022, 8, 21, 5, 7, 10, 787, DateTimeKind.Local).AddTicks(1298),
                            Result = false,
                            TruckId = 10
                        },
                        new
                        {
                            InspectionId = 18,
                            CreatedAt = new DateTime(2022, 12, 15, 10, 33, 5, 538, DateTimeKind.Local).AddTicks(5782),
                            Description = "aliquid",
                            InspectionDate = new DateTime(2023, 2, 11, 12, 40, 26, 78, DateTimeKind.Local).AddTicks(8718),
                            Result = true,
                            TruckId = 7
                        },
                        new
                        {
                            InspectionId = 19,
                            CreatedAt = new DateTime(2022, 12, 1, 3, 50, 42, 153, DateTimeKind.Local).AddTicks(4527),
                            Description = "Laborum repellendus neque.",
                            InspectionDate = new DateTime(2022, 8, 4, 20, 13, 41, 370, DateTimeKind.Local).AddTicks(6066),
                            Result = true,
                            TruckId = 20
                        },
                        new
                        {
                            InspectionId = 20,
                            CreatedAt = new DateTime(2022, 9, 6, 20, 25, 1, 881, DateTimeKind.Local).AddTicks(4740),
                            Description = "Ut eaque et voluptatum qui est accusantium vitae eum.\nVoluptatibus occaecati enim qui eius inventore voluptatum facere quis.\nDistinctio reprehenderit magni.\nQuasi amet sunt.\nLaboriosam corrupti fuga et mollitia aut assumenda ipsam.",
                            InspectionDate = new DateTime(2023, 1, 26, 3, 46, 56, 662, DateTimeKind.Local).AddTicks(3421),
                            Result = false,
                            TruckId = 6
                        });
                });

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhotoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"), 1L, 1);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<byte[]>("PhotoData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PhotoId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Repair", b =>
                {
                    b.Property<int>("RepairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RepairID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepairId"), 1L, 1);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RepairDate")
                        .HasColumnType("date");

                    b.Property<int?>("TruckId")
                        .HasColumnType("int")
                        .HasColumnName("TruckID");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("RepairId");

                    b.HasIndex("TruckId");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Truck", b =>
                {
                    b.Property<int>("TruckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TruckID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TruckId"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ChassisNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("EngineNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("FuelConsumption")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("FuelType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("InsuranceExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("InsurancePolicyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TruckNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Vin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VIN");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("TruckId");

                    b.ToTable("Trucks");

                    b.HasData(
                        new
                        {
                            TruckId = 1,
                            Capacity = 690,
                            ChassisNumber = "3d1a3e2c-eee3-4666-9d0b-7cfb72350517",
                            CreatedAt = new DateTime(2022, 7, 27, 10, 2, 9, 790, DateTimeKind.Local).AddTicks(5610),
                            EngineNumber = "1e9cf761-f142-4269-be61-7de5a9d52b0b",
                            FuelConsumption = 3.461385633079980m,
                            FuelType = "Electric",
                            InsuranceExpirationDate = new DateTime(2023, 9, 5, 21, 46, 39, 782, DateTimeKind.Local).AddTicks(2636),
                            InsurancePolicyNumber = "f332a97c-2b3e-4f54-9e13-cc15e45df38a",
                            Model = "CX-9",
                            RegistrationNumber = "PPY35DS6SBVV60067",
                            TruckNumber = "83GRNFCX3NA838810",
                            Vin = "PP0ZTU2II9ZO44795",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 2,
                            Capacity = 351,
                            ChassisNumber = "6265caa3-9194-4b2a-b2ab-3cf79b7d6eb6",
                            CreatedAt = new DateTime(2022, 9, 8, 23, 37, 48, 760, DateTimeKind.Local).AddTicks(8795),
                            EngineNumber = "d90345b6-f65a-4782-be1a-28bb71027a9d",
                            FuelConsumption = 1.941382941296968m,
                            FuelType = "Gasoline",
                            InsuranceExpirationDate = new DateTime(2024, 3, 16, 21, 1, 6, 760, DateTimeKind.Local).AddTicks(2522),
                            InsurancePolicyNumber = "7651155a-c6cb-4625-9920-a00927c6ba93",
                            Model = "Wrangler",
                            RegistrationNumber = "Q32CBQWTNXCO93294",
                            TruckNumber = "RE5Z3BSG80T110680",
                            Vin = "Z31CUOQO31H954980",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 3,
                            Capacity = 914,
                            ChassisNumber = "5c306bdb-6370-4803-b547-5c989dfdc0ab",
                            CreatedAt = new DateTime(2022, 10, 22, 13, 13, 27, 731, DateTimeKind.Local).AddTicks(1897),
                            EngineNumber = "ff517cc2-a5d2-4e42-907e-c3b5cd1d5042",
                            FuelConsumption = 4.421380249513956m,
                            FuelType = "Diesel",
                            InsuranceExpirationDate = new DateTime(2023, 9, 25, 20, 15, 33, 738, DateTimeKind.Local).AddTicks(2290),
                            InsurancePolicyNumber = "9555d697-56fb-4ce3-983c-eab992a2dc9b",
                            Model = "Focus",
                            RegistrationNumber = "RH7LH2ZGIJJH36519",
                            TruckNumber = "APV7K69YCDNT72551",
                            Vin = "8I2OWIFUNTOU65165",
                            Year = 2023
                        },
                        new
                        {
                            TruckId = 4,
                            Capacity = 576,
                            ChassisNumber = "165d4386-8c7e-44a9-8277-ea951fc96a6d",
                            CreatedAt = new DateTime(2022, 12, 5, 2, 49, 6, 701, DateTimeKind.Local).AddTicks(4990),
                            EngineNumber = "49697cfd-2a35-4811-bfca-2b49ba2a9000",
                            FuelConsumption = 2.901377557730944m,
                            FuelType = "Gasoline",
                            InsuranceExpirationDate = new DateTime(2023, 4, 5, 19, 30, 0, 716, DateTimeKind.Local).AddTicks(2048),
                            InsurancePolicyNumber = "de0fb26a-299c-4496-b8b5-ccb0ddf472b9",
                            Model = "Roadster",
                            RegistrationNumber = "SVCTOF33D5QA69745",
                            TruckNumber = "TZKE01PGHQGL44422",
                            Vin = "IW31XC318KVE75350",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 5,
                            Capacity = 237,
                            ChassisNumber = "d4cd6d64-2a93-4b0f-9b47-95f239340fb7",
                            CreatedAt = new DateTime(2023, 1, 17, 16, 24, 45, 671, DateTimeKind.Local).AddTicks(8096),
                            EngineNumber = "a3820a10-46b3-4684-b050-8a0bb9aed9fe",
                            FuelConsumption = 1.3813748659479316m,
                            FuelType = "Hybrid",
                            InsuranceExpirationDate = new DateTime(2023, 10, 15, 18, 44, 27, 694, DateTimeKind.Local).AddTicks(1819),
                            InsurancePolicyNumber = "337e40ab-8ecf-4419-a43a-93b1ccb167f7",
                            Model = "Explorer",
                            RegistrationNumber = "T9H2US6Q8SY312971",
                            TruckNumber = "CA9MGX5YL4ZD16292",
                            Vin = "RB4DZ6S7SCCZ85535",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 6,
                            Capacity = 800,
                            ChassisNumber = "b606e629-06a6-4cee-88ea-91b69b26e8f3",
                            CreatedAt = new DateTime(2023, 3, 2, 6, 0, 24, 642, DateTimeKind.Local).AddTicks(1195),
                            EngineNumber = "b6e19656-0b23-4521-a6c7-2e5858ba5873",
                            FuelConsumption = 3.86137217416492m,
                            FuelType = "Electric",
                            InsuranceExpirationDate = new DateTime(2023, 4, 25, 17, 58, 54, 672, DateTimeKind.Local).AddTicks(1580),
                            InsurancePolicyNumber = "550c98cc-6cd7-40ed-af81-1989a4c54219",
                            Model = "Camry",
                            RegistrationNumber = "UMMB04AD3EFW46197",
                            TruckNumber = "UKYUWSLGPHS578163",
                            Vin = "1P5Q00GDD4JJ95720",
                            Year = 2023
                        },
                        new
                        {
                            TruckId = 7,
                            Capacity = 462,
                            ChassisNumber = "46f17355-0399-4e4f-8a8b-9449cb28915f",
                            CreatedAt = new DateTime(2022, 4, 14, 19, 36, 3, 612, DateTimeKind.Local).AddTicks(4340),
                            EngineNumber = "ad581d10-ba36-4662-8a81-94a08945191b",
                            FuelConsumption = 2.341369482381908m,
                            FuelType = "Hybrid",
                            InsuranceExpirationDate = new DateTime(2023, 11, 4, 17, 13, 21, 650, DateTimeKind.Local).AddTicks(1387),
                            InsurancePolicyNumber = "e8b93164-f883-4f42-be56-b593edb21878",
                            Model = "F-150",
                            RegistrationNumber = "V0QK6HD1Y0MP79423",
                            TruckNumber = "DVN1DO1YUULX50033",
                            Vin = "A4532T5JXVR415904",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 8,
                            Capacity = 123,
                            ChassisNumber = "07f77817-0fbe-4305-b302-67299c74a863",
                            CreatedAt = new DateTime(2022, 5, 28, 9, 11, 42, 582, DateTimeKind.Local).AddTicks(7464),
                            EngineNumber = "7e4fcee2-79d3-445c-9d49-063cd8522487",
                            FuelConsumption = 4.821366790598896m,
                            FuelType = "Diesel",
                            InsuranceExpirationDate = new DateTime(2023, 5, 15, 16, 27, 48, 628, DateTimeKind.Local).AddTicks(1185),
                            InsurancePolicyNumber = "31226960-babd-4154-907a-c3a091eb2053",
                            Model = "Land Cruiser",
                            RegistrationNumber = "WEVTCTHOTNTI22649",
                            TruckNumber = "W5C9TJHGY8EP21904",
                            Vin = "KI6F3NTPHNYP26088",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 9,
                            Capacity = 686,
                            ChassisNumber = "29aa2f73-e9c9-45fd-8bc9-19189fc9c8fc",
                            CreatedAt = new DateTime(2022, 7, 10, 22, 47, 21, 553, DateTimeKind.Local).AddTicks(556),
                            EngineNumber = "ea995827-e385-4ea6-a38d-222a2a3f320a",
                            FuelConsumption = 3.301364098815884m,
                            FuelType = "Gasoline",
                            InsuranceExpirationDate = new DateTime(2023, 11, 24, 15, 42, 15, 606, DateTimeKind.Local).AddTicks(942),
                            InsurancePolicyNumber = "d3c01138-ae59-4492-927b-7630deba6acd",
                            Model = "Ranchero",
                            RegistrationNumber = "XS02I6KBO9AB55875",
                            TruckNumber = "FG2H9FXY3LXH83775",
                            Vin = "TW7S5HIV2EF936273",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 10,
                            Capacity = 348,
                            ChassisNumber = "be106360-d41e-4a5b-ab3e-43509e3332b4",
                            CreatedAt = new DateTime(2022, 8, 23, 12, 23, 0, 523, DateTimeKind.Local).AddTicks(3649),
                            EngineNumber = "660b8061-da07-4c28-90b4-facc510d7db5",
                            FuelConsumption = 1.781361407032872m,
                            FuelType = "Diesel",
                            InsuranceExpirationDate = new DateTime(2023, 6, 4, 14, 56, 42, 584, DateTimeKind.Local).AddTicks(699),
                            InsurancePolicyNumber = "7167c019-d79c-4f86-be1a-670c40b00e47",
                            Model = "Civic",
                            RegistrationNumber = "Y65AOIOYJVI489102",
                            TruckNumber = "YRROPADG7YR955645",
                            Vin = "3B847B72M6MU46458",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 11,
                            Capacity = 910,
                            ChassisNumber = "1e1003a5-f589-4141-9c64-9eb5bd77c10e",
                            CreatedAt = new DateTime(2022, 10, 6, 1, 58, 39, 493, DateTimeKind.Local).AddTicks(6744),
                            EngineNumber = "8dc9a12b-bed2-49fa-bb1d-4377eeb31b37",
                            FuelConsumption = 4.261358715249856m,
                            FuelType = "Electric",
                            InsuranceExpirationDate = new DateTime(2023, 12, 14, 14, 11, 9, 562, DateTimeKind.Local).AddTicks(460),
                            InsurancePolicyNumber = "935ffeef-f5d2-4a73-a5ef-36f79e3d6f90",
                            Model = "Malibu",
                            RegistrationNumber = "ZKAJUVSLEIPX32327",
                            TruckNumber = "H1GW66UYCBK127516",
                            Vin = "CP9H85V87YUE56643",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 12,
                            Capacity = 572,
                            ChassisNumber = "ae19fe12-3407-4a9d-8ea1-320689da2863",
                            CreatedAt = new DateTime(2022, 11, 18, 15, 34, 18, 463, DateTimeKind.Local).AddTicks(9834),
                            EngineNumber = "ba01248d-3bb4-4b2a-9483-98ba3e697e1f",
                            FuelConsumption = 2.741356023466848m,
                            FuelType = "Hybrid",
                            InsuranceExpirationDate = new DateTime(2023, 6, 24, 13, 25, 36, 540, DateTimeKind.Local).AddTicks(217),
                            InsurancePolicyNumber = "ab3b0987-e4bd-4f02-aa0f-0ec67933a290",
                            Model = "Altima",
                            RegistrationNumber = "0YES08V894WQ65553",
                            TruckNumber = "ZC54M1AGGPDU89387",
                            Vin = "M4ATAYKERPBZ66828",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 13,
                            Capacity = 234,
                            ChassisNumber = "dc3fb9c0-ff1e-4ad8-baae-997c9768f81a",
                            CreatedAt = new DateTime(2023, 1, 1, 5, 9, 57, 434, DateTimeKind.Local).AddTicks(2923),
                            EngineNumber = "b420c212-303e-4e71-9718-b49e39d6d3ba",
                            FuelConsumption = 1.2213533316838336m,
                            FuelType = "Electric",
                            InsuranceExpirationDate = new DateTime(2024, 1, 3, 12, 40, 3, 517, DateTimeKind.Local).AddTicks(9970),
                            InsurancePolicyNumber = "8d452613-960c-4db0-8eee-56f0bd3d9247",
                            Model = "Camaro",
                            RegistrationNumber = "1CJ16KZV3QDJ98780",
                            TruckNumber = "IMUB2XQYL2WM61257",
                            Vin = "VIB6BS8KCHIK77013",
                            Year = 2023
                        },
                        new
                        {
                            TruckId = 14,
                            Capacity = 797,
                            ChassisNumber = "fb85a490-14c0-4860-8946-773b10030f0e",
                            CreatedAt = new DateTime(2023, 2, 13, 18, 45, 36, 404, DateTimeKind.Local).AddTicks(6016),
                            EngineNumber = "cb728112-5dd7-41a9-bc5a-36cc91653f30",
                            FuelConsumption = 3.701350639900820m,
                            FuelType = "Gasoline",
                            InsuranceExpirationDate = new DateTime(2023, 7, 14, 11, 54, 30, 495, DateTimeKind.Local).AddTicks(9730),
                            InsurancePolicyNumber = "9542e603-b8cb-4b24-954a-aa72d63c00ae",
                            Model = "A4",
                            RegistrationNumber = "2QOACX2JYDKC42005",
                            TruckNumber = "1XJJIS6GPFPE33127",
                            Vin = "5XCJDMXQW9P487198",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 15,
                            Capacity = 458,
                            ChassisNumber = "12e0f2bd-3530-4591-a79a-6cfdf3bec48c",
                            CreatedAt = new DateTime(2023, 3, 29, 8, 21, 15, 374, DateTimeKind.Local).AddTicks(9106),
                            EngineNumber = "9434fefa-877f-43da-984f-89de6530e35d",
                            FuelConsumption = 2.181347948117808m,
                            FuelType = "Diesel",
                            InsuranceExpirationDate = new DateTime(2024, 1, 23, 11, 8, 57, 473, DateTimeKind.Local).AddTicks(9485),
                            InsurancePolicyNumber = "36299c77-209f-4cee-9496-ad468bd34068",
                            Model = "Colorado",
                            RegistrationNumber = "24TJI966TZR575231",
                            TruckNumber = "K79RZOMYTSI694999",
                            Vin = "EBDVEGLWH0WP97383",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 16,
                            Capacity = 120,
                            ChassisNumber = "d70f4e6f-e1bb-4ecc-9f67-e3cb6a5b4cb4",
                            CreatedAt = new DateTime(2022, 5, 11, 21, 56, 54, 345, DateTimeKind.Local).AddTicks(2201),
                            EngineNumber = "0ffabacf-cb42-4a7e-b277-75dfc0dd91e1",
                            FuelConsumption = 4.661345256334796m,
                            FuelType = "Gasoline",
                            InsuranceExpirationDate = new DateTime(2023, 8, 3, 10, 23, 24, 451, DateTimeKind.Local).AddTicks(9245),
                            InsurancePolicyNumber = "c59c2dfd-0ebd-4ae7-bbbe-638e260b5142",
                            Model = "Golf",
                            RegistrationNumber = "3IXRPM9TOLZY18457",
                            TruckNumber = "3IYZFJ2GY6CY66869",
                            Vin = "OQE8GAA21SE917566",
                            Year = 2023
                        },
                        new
                        {
                            TruckId = 17,
                            Capacity = 683,
                            ChassisNumber = "c48594ff-97f4-4c9c-bd7d-d0600b042e30",
                            CreatedAt = new DateTime(2022, 6, 24, 11, 32, 33, 315, DateTimeKind.Local).AddTicks(5294),
                            EngineNumber = "74ccc2fe-8b2d-476a-899d-c5b08ce38b0e",
                            FuelConsumption = 3.141342564551784m,
                            FuelType = "Diesel",
                            InsuranceExpirationDate = new DateTime(2024, 2, 12, 9, 37, 51, 429, DateTimeKind.Local).AddTicks(9004),
                            InsurancePolicyNumber = "21fe38a9-2186-485e-a531-4fd1d1897736",
                            Model = "CTS",
                            RegistrationNumber = "4W20VYDGJ7GR51683",
                            TruckNumber = "LSN6VEIY2JVQ38739",
                            Vin = "X4EKH4Y9LKLU27751",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 18,
                            Capacity = 344,
                            ChassisNumber = "c69e6327-5c2e-43d8-af15-11586ea232af",
                            CreatedAt = new DateTime(2022, 8, 7, 1, 8, 12, 285, DateTimeKind.Local).AddTicks(8384),
                            EngineNumber = "05a21273-69a6-46b7-8dcc-4901a1147b81",
                            FuelConsumption = 1.621339872768772m,
                            FuelType = "Electric",
                            InsuranceExpirationDate = new DateTime(2023, 8, 23, 8, 52, 18, 407, DateTimeKind.Local).AddTicks(8759),
                            InsurancePolicyNumber = "1a31dfeb-3317-4f09-8b95-26b86f824f4f",
                            Model = "Spyder",
                            RegistrationNumber = "5A791BG3EUNK84909",
                            TruckNumber = "43CEBAYH7WOI10610",
                            Vin = "7JFXJXNF6BSF37936",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 19,
                            Capacity = 907,
                            ChassisNumber = "22833f03-9460-4fe7-977c-200bc73f9cc1",
                            CreatedAt = new DateTime(2022, 9, 19, 14, 43, 51, 256, DateTimeKind.Local).AddTicks(1472),
                            EngineNumber = "314bca01-c5c0-4493-907f-7b92a5a5631f",
                            FuelConsumption = 4.10133718098576m,
                            FuelType = "Hybrid",
                            InsuranceExpirationDate = new DateTime(2024, 3, 3, 8, 6, 45, 385, DateTimeKind.Local).AddTicks(8513),
                            InsurancePolicyNumber = "dd3ba6fe-ca6a-4633-80b3-f3ffbacc7da6",
                            Model = "ATS",
                            RegistrationNumber = "6OCI7OKQ9GUD28135",
                            TruckNumber = "NE1MS5FZBAHA72481",
                            Vin = "GXG9LRBLQ3ZZ48121",
                            Year = 2022
                        },
                        new
                        {
                            TruckId = 20,
                            Capacity = 569,
                            ChassisNumber = "c1f72f8b-8480-4dbd-81fc-aef5093f2598",
                            CreatedAt = new DateTime(2022, 11, 2, 4, 19, 30, 226, DateTimeKind.Local).AddTicks(4567),
                            EngineNumber = "dbdd9c4a-ff0a-478d-8228-68b102feffe5",
                            FuelConsumption = 2.581334489202748m,
                            FuelType = "Electric",
                            InsuranceExpirationDate = new DateTime(2023, 9, 12, 7, 21, 12, 363, DateTimeKind.Local).AddTicks(8273),
                            InsurancePolicyNumber = "79eacf2c-5c59-4726-89b9-ea24cdf4e88c",
                            Model = "Mercielago",
                            RegistrationNumber = "72HRD0NE42B661361",
                            TruckNumber = "6OQT81VHGNA244351",
                            Vin = "PCHMML0RBUHK58306",
                            Year = 2022
                        });
                });

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Driver", b =>
                {
                    b.HasOne("FakeDataDriverDbGenerator.Entities.Company", "Company")
                        .WithOne("Driver")
                        .HasForeignKey("FakeDataDriverDbGenerator.Entities.Driver", "CompanyId")
                        .HasConstraintName("FK__Drivers__Company__3B75D760");

                    b.HasOne("FakeDataDriverDbGenerator.Entities.Photo", "Photo")
                        .WithOne("Driver")
                        .HasForeignKey("FakeDataDriverDbGenerator.Entities.Driver", "PhotoId")
                        .HasConstraintName("FK__Drivers__PhotoID__3C69FB99");

                    b.Navigation("Company");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Expense", b =>
                {
                    b.HasOne("FakeDataDriverDbGenerator.Entities.Driver", "Driver")
                        .WithMany("Expenses")
                        .HasForeignKey("DriverId")
                        .IsRequired()
                        .HasConstraintName("FK__Expenses__Driver__412EB0B6");

                    b.HasOne("FakeDataDriverDbGenerator.Entities.Truck", "Truck")
                        .WithMany("Expenses")
                        .HasForeignKey("TruckId")
                        .IsRequired()
                        .HasConstraintName("FK__Expenses__TruckI__4222D4EF");

                    b.Navigation("Driver");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Inspection", b =>
                {
                    b.HasOne("FakeDataDriverDbGenerator.Entities.Truck", "Truck")
                        .WithMany("Inspections")
                        .HasForeignKey("TruckId")
                        .HasConstraintName("FK__Inspectio__Truck__300424B4");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Repair", b =>
                {
                    b.HasOne("FakeDataDriverDbGenerator.Entities.Truck", "Truck")
                        .WithMany("Repairs")
                        .HasForeignKey("TruckId")
                        .HasConstraintName("FK__Repairs__TruckID__34C8D9D1");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Company", b =>
                {
                    b.Navigation("Driver");
                });

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Driver", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Photo", b =>
                {
                    b.Navigation("Driver");
                });

            modelBuilder.Entity("FakeDataDriverDbGenerator.Entities.Truck", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Inspections");

                    b.Navigation("Repairs");
                });
#pragma warning restore 612, 618
        }
    }
}
